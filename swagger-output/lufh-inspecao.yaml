{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Lufh Inspeção API",
    "description" : "API responsável por gerenciar a avaliação de usabilidade a partir do método por inspeção a padrões.",
    "contact" : {
      "url" : "https://www.linkedin.com/in/pablo-monteiro-santos/",
      "email" : "paablomt@gmail.com"
    },
    "license" : {
      "name" : "MIT License",
      "url" : "http://choosealicense.com/licenses/mit/"
    },
    "version" : "1.0.0-oas3"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/pablo.santos/LufhInspecao/1.0.0"
  } ],
  "tags" : [ {
    "name" : "question",
    "description" : "Representa as questões do formulário"
  }, {
    "name" : "user",
    "description" : "Operations about user"
  }, {
    "name" : "questionnaire",
    "description" : "Representa o formulário"
  } ],
  "paths" : {
    "/question" : {
      "put" : {
        "tags" : [ "question" ],
        "summary" : "Update an existing question",
        "operationId" : "updatePet",
        "requestBody" : {
          "description" : "Question object that needs to be added to the form",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Question"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Question"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "post" : {
        "tags" : [ "question" ],
        "summary" : "Add a new question",
        "operationId" : "addQuestion",
        "requestBody" : {
          "description" : "Question object that needs to be added to the form",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Question"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      }
    },
    "/question/findByClass" : {
      "get" : {
        "tags" : [ "question" ],
        "summary" : "Finds Questions by class",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findQuestionsByClass",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Class values that need to be considered for filter",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "default" : "available",
              "enum" : [ "available", "pending", "sold" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Question"
                  }
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Question"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid class value"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      }
    },
    "/question/{questionId}" : {
      "get" : {
        "tags" : [ "question" ],
        "summary" : "Find question by ID",
        "description" : "Returns a single question",
        "operationId" : "getQuestionById",
        "parameters" : [ {
          "name" : "questionId",
          "in" : "path",
          "description" : "ID of question to return",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Question"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Question"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "question" ],
        "summary" : "Deletes a question",
        "operationId" : "deleteQuestion",
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "questionId",
          "in" : "path",
          "description" : "Question id to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Question not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      }
    },
    "/user" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "requestBody" : {
          "description" : "Created user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/createWithArray" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "operationId" : "createUsersWithArrayInput",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserArray"
        },
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "operationId" : "logoutUser",
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "operationId" : "getUserByName",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "name that need to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid user supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be deleted",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "username" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "userStatus" : {
            "type" : "integer",
            "description" : "User Status",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "User"
        }
      },
      "Product" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "productName" : {
            "type" : "string",
            "example" : "Iphone X"
          },
          "manufacterName" : {
            "type" : "string",
            "example" : "Apple"
          },
          "productType" : {
            "$ref" : "#/components/schemas/ProductType"
          },
          "productClass" : {
            "type" : "string",
            "example" : "Class I"
          },
          "completionLevel" : {
            "type" : "string",
            "example" : "Alfa Test, Beta Test"
          }
        },
        "description" : "Representa um produto a ser avaliado"
      },
      "ProductType" : {
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "productTypeName" : {
            "type" : "string",
            "example" : "Medical Device"
          }
        },
        "description" : "Representa o tipo do produto"
      },
      "Question" : {
        "required" : [ "description" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "class" : {
            "type" : "string",
            "description" : "Each class of a question is a Nilsen heuristic",
            "enum" : [ "Aesthetic and minimalist design", "Consistency and standards", "Error prevention", "Flexibility and efficiency of use", "Help and documentation", "Help users recognize, diagnose, and recover from errors", "Match between system and the real world", "Recognition rather than recall", "User control and freedom", "Visibility of system status", "Privacy & Security" ]
          },
          "productType" : {
            "type" : "string",
            "enum" : [ "Software", "Hardware", "Hardware/Software" ]
          },
          "baseQuestion" : {
            "type" : "string",
            "example" : "Is it designed minimal?"
          },
          "detailedQuestion" : {
            "type" : "string",
            "example" : "Is only (and all) information, essential to decision making, displayed on the screen?"
          },
          "reference" : {
            "$ref" : "#/components/schemas/Reference"
          },
          "possibleAnswers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "choosenAnswer" : {
            "type" : "string"
          },
          "severity" : {
            "type" : "string",
            "enum" : [ "0 Not a usability problem at all", "1 Cosmetic problem only. Need not be fixed unless extra time is available", "2 Minor usability problem. Fixing this should be given low priority", "3 Major usability problem. Important to fix. Should be given high priority", "4 Usability catastrophe. Imperative to fix this before product can be released" ]
          },
          "weight" : {
            "type" : "string",
            "enum" : [ "0 Necessary for every System", "1 Necessary for Systems without more than one Dialog", "2 Necessary for Simple Systems without data have to be entered or with strict guidance throughout the usage process", "3 Necessary for Complex Systems with data have to be entered on several dialogs" ]
          }
        },
        "description" : "Representa uma questão",
        "xml" : {
          "name" : "Question"
        }
      },
      "Reference" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "type of reference",
            "enum" : [ "Article", "Book", "eDocument", "Standard" ]
          },
          "bibliography" : {
            "type" : "string"
          }
        }
      },
      "Questionnaire" : {
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "questions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Question"
            }
          }
        },
        "description" : "Representa um agrupamento de questões que devem ser respondidas no momento da análise de um produto."
      },
      "ProductEvaluation" : {
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "startDate" : {
            "type" : "string",
            "description" : "Data de entrada no lufh",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "description" : "Data de saída planejada do lufh",
            "format" : "date-time"
          },
          "urgency" : {
            "type" : "boolean"
          },
          "testType" : {
            "type" : "string",
            "description" : "Tipo de teste contratado",
            "enum" : [ "compliance inspection", "performance measurement", "heuristic evaluation", "user opinion" ]
          },
          "coverage" : {
            "type" : "string",
            "description" : "Abrangência contratada"
          }
        },
        "description" : "Representa uma solicitaçao de avaliação de um produto."
      },
      "Customer" : {
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "customerName" : {
            "type" : "string"
          },
          "cpfCnpj" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          }
        },
        "description" : "Representa um cliente que solicitou a avaliação de um produto"
      },
      "ApiResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    },
    "requestBodies" : {
      "UserArray" : {
        "description" : "List of user object",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "required" : true
      }
    },
    "securitySchemes" : {
      "petstore_auth" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
            "scopes" : {
              "write:pets" : "modify pets in your account",
              "read:pets" : "read your pets"
            }
          }
        }
      },
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      }
    }
  }
}