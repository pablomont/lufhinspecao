/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.uepb.lufh.avalia.contract.api;

import com.uepb.lufh.avalia.contract.model.Customer;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-02-22T00:21:14.348877-03:00[America/Fortaleza]")
@Validated
@Api(value = "customers", description = "the customers API")
public interface CustomersApi {

    default CustomersApiDelegate getDelegate() {
        return new CustomersApiDelegate() {};
    }

    /**
     * POST /customers : Add a new customer
     *
     * @param customer Customer object that needs to have a product evaluation (required)
     * @return Internal server error (status code 500)
     */

    @ApiOperation(value = "Add a new customer", nickname = "createCustomer", notes = "", tags={ "customers", })
    @ApiResponses(value = { 

        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customers",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createCustomer(

@ApiParam(value = "Customer object that needs to have a product evaluation", required = true )   @Valid @RequestBody Customer customer) {
        return getDelegate().createCustomer(customer);
    }


    /**
     * DELETE /customers/{customer_cpf_cnpj} : Deletes a customer
     *
     * @param customerCpfCnpj Customer id to delete (required)
     * @return Invalid ID supplied (status code 400)
     *         or Customer not found (status code 404)
     */

    @ApiOperation(value = "Deletes a customer", nickname = "deleteCustomer", notes = "", tags={ "customers", })
    @ApiResponses(value = { 

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Customer not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/customers/{customer_cpf_cnpj}"
    )
    default ResponseEntity<Void> deleteCustomer(@ApiParam(value = "Customer id to delete", required = true) @PathVariable("customer_cpf_cnpj") Long customerCpfCnpj

) {
        return getDelegate().deleteCustomer(customerCpfCnpj);
    }


    /**
     * GET /customers/{customer_cpf_cnpj} : Find a customer by ID
     *
     * @param customerCpfCnpj CPF or CNPJ of customer to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Customer not found (status code 404)
     */

    @ApiOperation(value = "Find a customer by ID", nickname = "findCustomer", notes = "", response = Customer.class, tags={ "customers", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "successful operation", response = Customer.class),

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Customer not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers/{customer_cpf_cnpj}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<Customer> findCustomer(@ApiParam(value = "CPF or CNPJ of customer to return", required = true) @PathVariable("customer_cpf_cnpj") Long customerCpfCnpj

) {
        return getDelegate().findCustomer(customerCpfCnpj);
    }


    /**
     * GET /customers : Finds all customers
     *
     * @param customerCpfCnpj CPF and CNPJ values that can be considered for filter (optional)
     * @return successful operation (status code 200)
     *         or Not found (status code 404)
     */

    @ApiOperation(value = "Finds all customers", nickname = "findCustomers", notes = "", response = Customer.class, responseContainer = "List", tags={ "customers", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "successful operation", response = Customer.class, responseContainer = "List"),

        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Customer>> findCustomers(@ApiParam(value = "CPF and CNPJ values that can be considered for filter") @Valid @RequestParam(value = "customer_cpf_cnpj", required = false) String customerCpfCnpj

) {
        return getDelegate().findCustomers(customerCpfCnpj);
    }


    /**
     * PUT /customers/{customer_cpf_cnpj} : Update an existing customer
     *
     * @param customerCpfCnpj Customer id to update (required)
     * @param customer Customer object that needs to have a product evaluation (required)
     * @return Invalid ID supplied (status code 400)
     *         or Customer not found (status code 404)
     *         or Validation exception (status code 405)
     */

    @ApiOperation(value = "Update an existing customer", nickname = "updateCustomer", notes = "", tags={ "customers", })
    @ApiResponses(value = { 

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Customer not found"),

        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/customers/{customer_cpf_cnpj}",
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<Void> updateCustomer(@ApiParam(value = "Customer id to update", required = true) @PathVariable("customer_cpf_cnpj") Long customerCpfCnpj

,

@ApiParam(value = "Customer object that needs to have a product evaluation", required = true )   @Valid @RequestBody Customer customer) {
        return getDelegate().updateCustomer(customerCpfCnpj, customer);
    }

}
