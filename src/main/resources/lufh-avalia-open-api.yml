---
openapi: 3.0.0
info:
  title: Lufh Inspeção API
  description: API responsável por gerenciar a avaliação de usabilidade a partir do método por inspeção a padrões.
  contact:
    url: https://www.linkedin.com/in/pablo-monteiro-santos/
    email: paablomt@gmail.com
  license:
    name: MIT License
    url: http://choosealicense.com/licenses/mit/
  version: 1.0.0-oas3
servers:
  - url: https://virtserver.swaggerhub.com/lufh-avalia/
tags:
  - name: questions
    description: Disponibiliza operações sobre as questões.
  - name: questionnaires
    description: Disponibiliza operações sobre os questionários utilizado para avaliar o produto.
  - name: request-evaluations
    description: Disponibiliza operações sobre as requisições de avaliação.
  - name: reports
    description: Disponibiliza operações sobre os relatórios de uma avaliação.
  - name: products
    description: Disponibiliza operações sobre os produtos a serem avaliados.
  - name: customers
    description: Disponibiliza operações sobre os clientes que solicitaram uma avaliação de um determinado produto.
paths:
  /questions:
    get:
      tags:
        - questions
      summary: Finds all questions
      operationId: findQuestions
      parameters:
        - name: class
          in: query
          description: Class values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - Aesthetic and minimalist design
              - Consistency and standards
              - Error prevention
              - Flexibility and efficiency of use
              - Help and documentation
              - Help users recognize and recover from errors
              - Match between system and the real world
              - Recognition rather than recall
              - User control and freedom
              - Visibility of system status
              - Privacy & Security
        - name: reference
          in: query
          description: Reference values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - Article
              - Book
              - eDocument
              - Standard
        - name: product_type
          in: query
          description: Product type values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - Software
              - Hardware
              - Hardware/Software
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionOutput'
        "404":
          description: Not found
    post:
      tags:
        - questions
      summary: Add a new question
      operationId: createQuestion
      requestBody:
        description: Question object that needs to be added to the form
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
        required: true
      responses:
        "500":
          description: Internal server error
  /questions/{question_id}:
    get:
      tags:
        - questions
      summary: Find question by ID
      operationId: findQuestion
      parameters:
        - name: question_id
          in: path
          description: ID of question to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionOutput'
        "400":
          description: Invalid ID supplied
        "404":
          description: Question not found
    put:
      tags:
        - questions
      summary: Update an existing question
      operationId: updateQuestion
      parameters:
        - name: question_id
          in: path
          description: Question id to update
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        description: Question object that needs to be added to the form
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
        required: true
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Question not found
        "405":
          description: Validation exception
    delete:
      tags:
        - questions
      summary: Deletes a question
      operationId: deleteQuestion
      parameters:
        - name: question_id
          in: path
          description: Question id to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Question not found
  /questionnaires:
    get:
      tags:
        - questionnaires
      summary: Finds all questionnaires
      operationId: findQuestionnaires
      parameters:
        - name: evaluator
          in: query
          description: Evaluator values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: creator
          in: query
          description: Creator values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionnaireInput'
        "404":
          description: Not found
    post:
      tags:
        - questionnaires
      summary: Add a new questionnaire
      operationId: createQuestionaire
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionnaireInput'
      responses:
        "500":
          description: Internal server error
  /questionnaires/{questionnaire_id}:
    get:
      tags:
        - questionnaires
      summary: Find questionnaire by ID
      operationId: findQuestionnaire
      parameters:
        - name: questionnaire_id
          in: path
          description: ID of questionnaire to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionnaireInput'
            application/xml:
              schema:
                $ref: '#/components/schemas/QuestionnaireInput'
        "400":
          description: Invalid ID supplied
        "404":
          description: Questionnaire not found
    put:
      tags:
        - questionnaires
      summary: Update an existing questionnaire
      operationId: updateQuestionnaire
      parameters:
        - name: questionnaire_id
          in: path
          description: Questionnaire id to update
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionnaireOutput'
        required: true
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Questionnaire not found
        "405":
          description: Validation exception
    delete:
      tags:
        - questionnaires
      summary: Deletes a questionnaire
      operationId: deleteQuestionnaire
      parameters:
        - name: questionnaire_id
          in: path
          description: Questionnaire id to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Questionnaire not found
  /request-evaluations:
    get:
      tags:
        - request-evaluations
      summary: Finds all request-evaluations
      operationId: findRequestEvaluations
      parameters:
        - name: customer_cpf_cnpj
          in: query
          description: CPF and CNPJ values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestEvaluationOutput'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CpfCnpjInvalid:
                  summary: customer_cpf_cnpj invalid
                  value:
                    message: customer_cpf_cnpj invalid
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                RequestEvaluationNotFound:
                  summary: Request Evaluation not found
                  value:
                    message: Request Evaluation not found
    post:
      tags:
        - request-evaluations
      summary: Add a new request-evaluation
      operationId: createRequestEvaluation
      parameters:
        - name: product_id
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: customer_cpf_cnpj
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Request evaluation object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEvaluationInput'
        required: true
      responses:
        "200":
          description: A RequestEvaluationOutput object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestEvaluationOutput'
        "500":
          description: Internal server error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CpfCnpjInvalid:
                  summary: customer_cpf_cnpj invalid
                  value:
                    message: customer_cpf_cnpj invalid
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ProductNotFound:
                  summary: Product not found
                  value:
                    message: Product not found
  /request-evaluations/{request_evaluation_id}:
    get:
      tags:
        - request-evaluations
      summary: Find request evaluation by ID
      operationId: findRequestEvaluation
      parameters:
        - name: request_evaluation_id
          in: path
          description: ID of request evaluation to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestEvaluationOutput'
          links:
            FindProductByProductId:
              operationId: findProduct
              parameters:
                product_id: $response.body#/productId
              description: |
                The 'productId' value returned in the response can be used as the  'product_id' in 'GET /products/{product_id}
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                RequestEvaluationNotFound:
                  summary: Request Evaluation not found
                  value:
                    message: Request Evaluation not found
    put:
      tags:
        - request-evaluations
      summary: Update an existing request evaluation
      operationId: updateRequestEvaluation
      parameters:
        - name: request_evaluation_id
          in: path
          description: Request Evaluation id to update
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEvaluationInput'
        required: true
      responses:
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                RequestEvaluationNotFound:
                  summary: Request Evaluation not found
                  value:
                    message: Request Evaluation not found
    delete:
      tags:
        - request-evaluations
      summary: Deletes a request evaluation
      operationId: deleteRequestEvaluation
      parameters:
        - name: request_evaluation_id
          in: path
          description: Request Evaluation id to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No content
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                RequestEvaluationNotFound:
                  summary: Request Evaluation Not Found
                  value:
                    message: Request Evaluation Not Found
  /reports:
    get:
      tags:
        - reports
      summary: Finds all reports
      operationId: findReports
      parameters:
        - name: request_evaluation_id
          in: query
          description: Request evaluation id values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: product_type
          in: query
          description: Product type values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - Software
              - Hardware
              - Hardware/Software
        - name: report_date
          in: query
          description: Report date values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        "404":
          description: Not found
    post:
      tags:
        - reports
      summary: Add a new report
      operationId: createReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
        required: true
      responses:
        "500":
          description: Internal server error
  /reports/{report_id}:
    get:
      tags:
        - reports
      summary: Find a report by ID
      operationId: findReport
      parameters:
        - name: report_id
          in: path
          description: ID of report to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
            application/xml:
              schema:
                $ref: '#/components/schemas/Report'
        "400":
          description: Invalid ID supplied
        "404":
          description: Report not found
    put:
      tags:
        - reports
      summary: Update an existing report
      operationId: updateReport
      parameters:
        - name: report_id
          in: path
          description: Report id to update
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
          application/xml:
            schema:
              $ref: '#/components/schemas/Report'
        required: true
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Question not found
        "405":
          description: Validation exception
    delete:
      tags:
        - reports
      summary: Deletes a report
      operationId: deleteReport
      parameters:
        - name: report_id
          in: path
          description: Report id to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Report not found
  /products:
    get:
      tags:
        - products
      summary: Finds all products
      operationId: findProducts
      parameters:
        - name: product_name
          in: query
          description: Product name values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: product_type
          in: query
          description: Product type values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - Websites
              - Mobile applications
              - Software
              - Electronic games
              - Physical products with electronic interfaces
              - Home appliances
              - GPS navigation systems
              - In-car entertainment systems
              - Vending machines
              - ATMs (Automated Teller Machines)
              - Access control systems
              - Lighting and temperature control systems in buildings
              - Medical devices
              - Consumer products
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductOutput'
    post:
      tags:
        - products
      summary: Add a new product
      operationId: createProduct
      requestBody:
        description: Product object that needs to be evaluated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
        required: true
      responses:
        "200":
          description: A ProductOutput object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductOutput'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ProductTypeInvalid:
                  summary: productType invalid
                  value:
                    message: productType invalid
  /products/{product_id}:
    get:
      tags:
        - products
      summary: Find product by ID
      operationId: findProduct
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductOutput'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductOutput'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CustomerNotFound:
                  summary: Product not found
                  value:
                    message: Product not found
    put:
      tags:
        - products
      summary: Update an existing product
      operationId: updateProduct
      parameters:
        - name: product_id
          in: path
          description: Product id to update
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        description: Product object that needs to be evaluated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ProductTypeInvalid:
                  summary: productType invalid
                  value:
                    message: productType invalid
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ProductNotFound:
                  summary: Product not found
                  value:
                    message: Product not found
    delete:
      tags:
        - products
      summary: Deletes a product
      operationId: deleteProduct
      parameters:
        - name: product_id
          in: path
          description: Product id to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ProductNotFound:
                  summary: Product not found
                  value:
                    message: Product not found
  /customers:
    get:
      tags:
        - customers
      summary: Finds all customers
      operationId: findCustomers
      parameters:
        - name: customer_cpf_cnpj
          in: query
          description: CPF and CNPJ values that can be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerOutput'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CpfCnpjInvalid:
                  summary: customer_cpf_cnpj invalid
                  value:
                    message: customer_cpf_cnpj invalid
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CustomerNotFound:
                  summary: Customer not found
                  value:
                    message: Customer not found
    post:
      tags:
        - customers
      summary: Add a new customer
      operationId: createCustomer
      requestBody:
        description: Customer object that needs to have a product evaluation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
        required: true
      responses:
        "200":
          description: A CustomerOutput object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOutput'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CpfCnpjInvalid:
                  summary: cpfCnpj invalid
                  value:
                    message: cpfCnpj invalid
  /customers/{customer_cpf_cnpj}:
    get:
      tags:
        - customers
      summary: Find a customer by ID
      operationId: findCustomer
      parameters:
        - name: customer_cpf_cnpj
          in: path
          description: CPF or CNPJ of customer to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOutput'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomerOutput'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CpfCnpjInvalid:
                  summary: customer_cpf_cnpj invalid
                  value:
                    message: customer_cpf_cnpj invalid
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CustomerNotFound:
                  summary: Customer not found
                  value:
                    message: Customer not found
    put:
      tags:
        - customers
      summary: Update an existing customer
      operationId: updateCustomer
      parameters:
        - name: customer_cpf_cnpj
          in: path
          description: CPF or CNPJ of customer to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Customer object that needs to have a product evaluation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerOutput'
          application/xml:
            schema:
              $ref: '#/components/schemas/CustomerOutput'
        required: true
      responses:
        "200":
          description: A CustomerOutput object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOutput'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CpfCnpjInvalid:
                  summary: customer_cpf_cnpj invalid
                  value:
                    message: customer_cpf_cnpj invalid
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CustomerNotFound:
                  summary: Customer not found
                  value:
                    message: Customer not found
    delete:
      tags:
        - customers
      summary: Deletes a customer
      operationId: deleteCustomer
      parameters:
        - name: customer_cpf_cnpj
          in: path
          description: CPF or CNPJ of customer to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No content
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CustomerNotFound:
                  summary: Customer not found
                  value:
                    message: Customer not found
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                CpfCnpjInvalid:
                  summary: customer_cpf_cnpj invalid
                  value:
                    message: customer_cpf_cnpj invalid
components:
  schemas:
    ProductInput:
      type: object
      properties:
        productName:
          type: string
          example: Iphone X
        manufacterName:
          type: string
          example: Apple
        productType:
          $ref: '#/components/schemas/ProductType'
        productClass:
          type: string
          example: Class I
        completionLevel:
          type: string
          enum:
            - Alfa Test
            - Beta Test
            - Finished Product
            - Low Fidelity Prototype
            - Medium Fidelity Prototype
            - Specification
      description: Represents a product to be evaluated
    ProductOutput:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productName:
          type: string
          example: Iphone X
        manufacterName:
          type: string
          example: Apple
        productType:
          $ref: '#/components/schemas/ProductType'
        productClass:
          type: string
          example: Class I
        completionLevel:
          type: string
          example: Alfa Test
      description: Represents a product to be evaluated
    ProductType:
      type: object
      properties:
        name:
          type: string
          description: Each product can be tested by usability testing
          enum:
            - Websites
            - Mobile applications
            - Software
            - Electronic games
            - Physical products with electronic interfaces
            - Home appliances
            - GPS navigation systems
            - In-car entertainment systems
            - Vending machines
            - ATMs (Automated Teller Machines)
            - Access control systems
            - Lighting and temperature control systems in buildings
            - Medical devices
            - Consumer products
      description: Representa o tipo do produto
    QuestionOutput:
      required:
        - description
      type: object
      properties:
        id:
          type: integer
          format: int64
        class:
          $ref: '#/components/schemas/Class'
        productType:
          type: string
          enum:
            - Software
            - Hardware
            - Hardware/Software
        baseQuestion:
          type: string
          example: Is it designed minimal?
        detailedQuestion:
          type: string
          example: Is only (and all) information, essential to decision making, displayed on the screen?
        reference:
          $ref: '#/components/schemas/Reference'
        answer:
          $ref: '#/components/schemas/Answer'
      xml:
        name: Question
    Class:
      type: object
      properties:
        name:
          type: string
          description: Each class of a question is a Nilsen heuristic
          enum:
            - Aesthetic and minimalist design
            - Consistency and standards
            - Error prevention
            - Flexibility and efficiency of use
            - Help and documentation
            - Help users recognize, diagnose, and recover from errors
            - Match between system and the real world
            - Recognition rather than recall
            - User control and freedom
            - Visibility of system status
            - Privacy & Security
    QuestionInput:
      required:
        - description
      type: object
      properties:
        class:
          $ref: '#/components/schemas/Class'
        productType:
          type: string
          enum:
            - Software
            - Hardware
            - Hardware/Software
        baseQuestion:
          type: string
          example: Is it designed minimal?
        detailedQuestion:
          type: string
          example: Is only (and all) information, essential to decision making, displayed on the screen?
        reference:
          $ref: '#/components/schemas/Reference'
      xml:
        name: Question
    Reference:
      type: object
      properties:
        type:
          type: string
          description: type of reference
          enum:
            - Article
            - Book
            - eDocument
            - Standard
        bibliography:
          type: string
    Answer:
      type: object
      properties:
        answer:
          type: string
        severity:
          type: string
          enum:
            - 0 Not a usability problem at all
            - 1 Cosmetic problem only. Need not be fixed unless extra time is available
            - 2 Minor usability problem. Fixing this should be given low priority
            - 3 Major usability problem. Important to fix. Should be given high priority
            - 4 Usability catastrophe. Imperative to fix this before product can be released
        weight:
          type: string
          enum:
            - 0 Necessary for every System
            - 1 Necessary for Systems without more than one Dialog
            - 2 Necessary for Simple Systems without data have to be entered or with strict guidance throughout the usage process
            - 3 Necessary for Complex Systems with data have to be entered on several dialogs
      description: Represents the answer data for the questions
    QuestionnaireOutput:
      properties:
        id:
          type: integer
          format: int64
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionOutput'
        evaluator:
          type: string
        creator:
          type: string
      description: It represents a grouping of questions that must be answered when analyzing a product.
    QuestionnaireInput:
      properties:
        id:
          type: integer
          format: int64
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionInput'
        evaluator:
          type: string
        creator:
          type: string
      description: It represents a grouping of questions that must be answered when analyzing a product.
    RequestEvaluationOutput:
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: string
        customerCpfCnpj:
          type: string
        startDate:
          type: string
          description: Entry date into lufh
          format: date-time
        endDate:
          type: string
          description: Planned departure date from lufh
          format: date-time
        urgency:
          type: boolean
        testType:
          type: string
          description: Type of contracted test
          enum:
            - compliance inspection
            - performance measurement
            - heuristic evaluation
            - user opinion
        coverage:
          type: string
          description: Contracted scope
      description: Represents the output of a request to evaluate a product.
    RequestEvaluationInput:
      properties:
        startDate:
          type: string
          description: Entry date into lufh
          format: date-time
        endDate:
          type: string
          description: Planned departure date from lufh
          format: date-time
        urgency:
          type: boolean
        testType:
          type: string
          description: Type of contracted test
          enum:
            - compliance inspection
            - performance measurement
            - heuristic evaluation
            - user opinion
        coverage:
          type: string
          description: Contracted scope
      description: Represents the input of a request to evaluate a product.
    CustomerInput:
      properties:
        customerName:
          type: string
        cpfCnpj:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
      description: Represents a customer who has requested a product review
    CustomerOutput:
      properties:
        id:
          type: integer
        customerName:
          type: string
        cpfCnpj:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
      description: Represents a customer who has requested a product review
    Report:
      properties:
        requestEvaluationId:
          type: integer
        reportDate:
          type: string
          description: date the report was made
          format: date-time
        questionare:
          $ref: '#/components/schemas/QuestionnaireOutput'
      description: Represents the result of the evaluation
    Error:
      type: object
      properties:
        message:
          type: string