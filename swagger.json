{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "1.0.0-oas3",
    "contact" : {
      "email" : "paablomt@gmail.com",
      "url" : "https://www.linkedin.com/in/pablo-monteiro-santos/"
    },
    "license" : {
      "name" : "MIT License",
      "url" : "http://choosealicense.com/licenses/mit/"
    },
    "title" : "Lufh Inspeção API",
    "description" : "API responsável por gerenciar a avaliação de usabilidade a partir do método por inspeção a padrões."
  },
  "tags" : [ {
    "name" : "question",
    "description" : "Representa uma questão do questionário"
  }, {
    "name" : "questionnaire",
    "description" : "Grupo de questões utilizado para avaliar o produto."
  } ],
  "paths" : {
    "/question" : {
      "post" : {
        "tags" : [ "question" ],
        "summary" : "Add a new question",
        "operationId" : "addQuestion",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Question"
              }
            }
          },
          "description" : "Question object that needs to be added to the form",
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "question" ],
        "summary" : "Update an existing question",
        "operationId" : "updateQuestion",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Question"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Question"
              }
            }
          },
          "description" : "Question object that needs to be added to the form",
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      }
    },
    "/questions" : {
      "get" : {
        "tags" : [ "question" ],
        "summary" : "Finds all questions",
        "description" : "Multiple values can be provided with comma separated strings",
        "operationId" : "findQuestions",
        "parameters" : [ {
          "name" : "class",
          "in" : "query",
          "description" : "Class values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Aesthetic and minimalist design", "Consistency and standards", "Error prevention", "Flexibility and efficiency of use", "Help and documentation", "Help users recognize and recover from errors", "Match between system and the real world", "Recognition rather than recall", "User control and freedom", "Visibility of system status", "Privacy & Security" ]
          }
        }, {
          "name" : "reference",
          "in" : "query",
          "description" : "Reference values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Article", "Book", "eDocument", "Standard" ]
          }
        }, {
          "name" : "productType",
          "in" : "query",
          "description" : "ProductType values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Software", "Hardware", "Hardware/Software" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Question"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      }
    },
    "/question/{questionId}" : {
      "get" : {
        "tags" : [ "question" ],
        "summary" : "Find question by ID",
        "description" : "Returns a single question",
        "operationId" : "getQuestionById",
        "parameters" : [ {
          "name" : "questionId",
          "in" : "path",
          "description" : "ID of question to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Question"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Question"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "question" ],
        "summary" : "Deletes a question",
        "operationId" : "deleteQuestion",
        "parameters" : [ {
          "name" : "questionId",
          "in" : "path",
          "description" : "Question id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Question not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      }
    },
    "/questionnaire" : {
      "post" : {
        "tags" : [ "questionnaire" ],
        "summary" : "Add a new questionnaire",
        "operationId" : "addQuestionaire",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Questionnaire"
              }
            }
          }
        },
        "responses" : {
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "put" : {
        "tags" : [ "questionnaire" ],
        "summary" : "Update an existing questionnaire",
        "operationId" : "updateQuestionnaire",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Questionnaire"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Questionnaire not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      }
    },
    "/questionnaire/{questionnaireId}" : {
      "get" : {
        "tags" : [ "questionnaire" ],
        "summary" : "Find questionnaire by ID",
        "description" : "Returns a single questionnaire",
        "operationId" : "getQuestionnaireById",
        "parameters" : [ {
          "name" : "questionnaireId",
          "in" : "path",
          "description" : "ID of question to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Questionnaire"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Questionnaire"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Questionnaire not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "questionnaire" ],
        "summary" : "Deletes a questionnaire",
        "operationId" : "deleteQuestionnaire",
        "parameters" : [ {
          "name" : "questionnaireId",
          "in" : "path",
          "description" : "Questionnaire id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Questionnaire not found"
          }
        }
      }
    },
    "/questionnaires" : {
      "get" : {
        "tags" : [ "questionnaire" ],
        "summary" : "Finds all questionnaires",
        "description" : "Multiple values can be provided with comma separated strings",
        "operationId" : "findQuestionnaires",
        "parameters" : [ {
          "name" : "evaluator",
          "in" : "query",
          "description" : "Evaluator values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "creator",
          "in" : "query",
          "description" : "Creator values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Questionnaire"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    }
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/pablo.santos/LufhInspecao/1.0.0"
  } ],
  "components" : {
    "securitySchemes" : {
      "petstore_auth" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
            "scopes" : {
              "write:pets" : "modify pets in your account",
              "read:pets" : "read your pets"
            }
          }
        }
      },
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      }
    },
    "schemas" : {
      "Product" : {
        "description" : "Represents a product to be evaluated",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "productName" : {
            "type" : "string",
            "example" : "Iphone X"
          },
          "manufacterName" : {
            "type" : "string",
            "example" : "Apple"
          },
          "productType" : {
            "type" : "object",
            "$ref" : "#/components/schemas/ProductType"
          },
          "productClass" : {
            "type" : "string",
            "example" : "Class I"
          },
          "completionLevel" : {
            "type" : "string",
            "example" : "Alfa Test, Beta Test"
          }
        }
      },
      "ProductType" : {
        "description" : "Representa o tipo do produto",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "productTypeName" : {
            "type" : "string",
            "example" : "Medical Device"
          }
        }
      },
      "Question" : {
        "type" : "object",
        "required" : [ "description" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "class" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Class"
          },
          "productType" : {
            "type" : "string",
            "enum" : [ "Software", "Hardware", "Hardware/Software" ]
          },
          "baseQuestion" : {
            "type" : "string",
            "example" : "Is it designed minimal?"
          },
          "detailedQuestion" : {
            "type" : "string",
            "example" : "Is only (and all) information, essential to decision making, displayed on the screen?"
          },
          "reference" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Reference"
          },
          "answer" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Answer"
          }
        },
        "xml" : {
          "name" : "Question"
        }
      },
      "Class" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Each class of a question is a Nilsen heuristic",
            "enum" : [ "Aesthetic and minimalist design", "Consistency and standards", "Error prevention", "Flexibility and efficiency of use", "Help and documentation", "Help users recognize, diagnose, and recover from errors", "Match between system and the real world", "Recognition rather than recall", "User control and freedom", "Visibility of system status", "Privacy & Security" ]
          }
        }
      },
      "Reference" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "type of reference",
            "enum" : [ "Article", "Book", "eDocument", "Standard" ]
          },
          "bibliography" : {
            "type" : "string"
          }
        }
      },
      "Answer" : {
        "description" : "Represents the answer data for the questions",
        "type" : "object",
        "properties" : {
          "possibleAnswers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "choosenAnswer" : {
            "type" : "string"
          },
          "severity" : {
            "type" : "string",
            "enum" : [ "0 Not a usability problem at all", "1 Cosmetic problem only. Need not be fixed unless extra time is available", "2 Minor usability problem. Fixing this should be given low priority", "3 Major usability problem. Important to fix. Should be given high priority", "4 Usability catastrophe. Imperative to fix this before product can be released" ]
          },
          "weight" : {
            "type" : "string",
            "enum" : [ "0 Necessary for every System", "1 Necessary for Systems without more than one Dialog", "2 Necessary for Simple Systems without data have to be entered or with strict guidance throughout the usage process", "3 Necessary for Complex Systems with data have to be entered on several dialogs" ]
          }
        }
      },
      "Questionnaire" : {
        "description" : "It represents a grouping of questions that must be answered when analyzing a product.",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "questions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Question"
            }
          },
          "evaluator" : {
            "type" : "string"
          },
          "creator" : {
            "type" : "string"
          }
        }
      },
      "RequestEvaluation" : {
        "description" : "Represents a request to evaluate a product.",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "product" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Product"
          },
          "customer" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Customer"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Entry date into lufh"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Planned departure date from lufh"
          },
          "urgency" : {
            "type" : "boolean"
          },
          "testType" : {
            "type" : "string",
            "description" : "Type of contracted test",
            "enum" : [ "compliance inspection", "performance measurement", "heuristic evaluation", "user opinion" ]
          },
          "coverage" : {
            "type" : "string",
            "description" : "Contracted scope"
          }
        }
      },
      "Customer" : {
        "description" : "Represents a customer who has requested a product review",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "customerName" : {
            "type" : "string"
          },
          "cpfCnpj" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          }
        }
      },
      "ReportEvaluation" : {
        "description" : "Represents the result of the evaluation",
        "properties" : {
          "productEvaluationId" : {
            "type" : "integer"
          },
          "questionare" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Questionnaire"
          }
        }
      }
    }
  }
}