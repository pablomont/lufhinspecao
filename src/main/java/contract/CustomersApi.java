/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package contract;

import model.CustomerDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-02-21T22:46:02.357514-03:00[America/Fortaleza]")
@Validated
@Api(value = "customers", description = "the customers API")
public interface CustomersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /customers : Add a new customer
     *
     * @param customerDto Customer object that needs to have a product evaluation (required)
     * @return Internal server error (status code 500)
     */
    @ApiOperation(value = "Add a new customer", nickname = "createCustomer", notes = "", tags={ "customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal server error") })
    @PostMapping(
        value = "/customers",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _createCustomer(@ApiParam(value = "Customer object that needs to have a product evaluation" ,required=true )  @Valid @RequestBody CustomerDto customerDto) {
        return createCustomer(customerDto);
    }

    // Override this method
    default  ResponseEntity<Void> createCustomer(CustomerDto customerDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /customers/{customer_cpf_cnpj} : Deletes a customer
     *
     * @param customerCpfCnpj Customer id to delete (required)
     * @return Invalid ID supplied (status code 400)
     *         or Customer not found (status code 404)
     */
    @ApiOperation(value = "Deletes a customer", nickname = "deleteCustomer", notes = "", tags={ "customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Customer not found") })
    @DeleteMapping(
        value = "/customers/{customer_cpf_cnpj}"
    )
    default ResponseEntity<Void> _deleteCustomer(@ApiParam(value = "Customer id to delete",required=true) @PathVariable("customer_cpf_cnpj") Long customerCpfCnpj) {
        return deleteCustomer(customerCpfCnpj);
    }

    // Override this method
    default  ResponseEntity<Void> deleteCustomer(Long customerCpfCnpj) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers/{customer_cpf_cnpj} : Find a customer by ID
     *
     * @param customerCpfCnpj CPF or CNPJ of customer to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Customer not found (status code 404)
     */
    @ApiOperation(value = "Find a customer by ID", nickname = "findCustomer", notes = "", response = CustomerDto.class, tags={ "customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CustomerDto.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Customer not found") })
    @GetMapping(
        value = "/customers/{customer_cpf_cnpj}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<CustomerDto> _findCustomer(@ApiParam(value = "CPF or CNPJ of customer to return",required=true) @PathVariable("customer_cpf_cnpj") Long customerCpfCnpj) {
        return findCustomer(customerCpfCnpj);
    }

    // Override this method
    default  ResponseEntity<CustomerDto> findCustomer(Long customerCpfCnpj) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : \"phoneNumber\", \"id\" : 0, \"cpfCnpj\" : \"cpfCnpj\", \"customerName\" : \"customerName\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Customer> <id>123</id> <customerName>aeiou</customerName> <cpfCnpj>aeiou</cpfCnpj> <email>aeiou</email> <phoneNumber>aeiou</phoneNumber> </Customer>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers : Finds all customers
     *
     * @param customerCpfCnpj CPF and CNPJ values that can be considered for filter (optional)
     * @return successful operation (status code 200)
     *         or Not found (status code 404)
     */
    @ApiOperation(value = "Finds all customers", nickname = "findCustomers", notes = "", response = CustomerDto.class, responseContainer = "List", tags={ "customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CustomerDto.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Not found") })
    @GetMapping(
        value = "/customers",
        produces = { "application/json" }
    )
    default ResponseEntity<List<CustomerDto>> _findCustomers(@ApiParam(value = "CPF and CNPJ values that can be considered for filter") @Valid @RequestParam(value = "customer_cpf_cnpj", required = false) String customerCpfCnpj) {
        return findCustomers(customerCpfCnpj);
    }

    // Override this method
    default  ResponseEntity<List<CustomerDto>> findCustomers(String customerCpfCnpj) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : \"phoneNumber\", \"id\" : 0, \"cpfCnpj\" : \"cpfCnpj\", \"customerName\" : \"customerName\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /customers/{customer_cpf_cnpj} : Update an existing customer
     *
     * @param customerCpfCnpj Customer id to update (required)
     * @param customerDto Customer object that needs to have a product evaluation (required)
     * @return Invalid ID supplied (status code 400)
     *         or Customer not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @ApiOperation(value = "Update an existing customer", nickname = "updateCustomer", notes = "", tags={ "customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Customer not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @PutMapping(
        value = "/customers/{customer_cpf_cnpj}",
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<Void> _updateCustomer(@ApiParam(value = "Customer id to update",required=true) @PathVariable("customer_cpf_cnpj") Long customerCpfCnpj,@ApiParam(value = "Customer object that needs to have a product evaluation" ,required=true )  @Valid @RequestBody CustomerDto customerDto) {
        return updateCustomer(customerCpfCnpj, customerDto);
    }

    // Override this method
    default  ResponseEntity<Void> updateCustomer(Long customerCpfCnpj, CustomerDto customerDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
