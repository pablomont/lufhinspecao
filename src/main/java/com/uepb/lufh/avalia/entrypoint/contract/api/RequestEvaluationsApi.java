/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.uepb.lufh.avalia.entrypoint.contract.api;

import com.uepb.lufh.avalia.entrypoint.contract.model.RequestEvaluationInput;
import com.uepb.lufh.avalia.entrypoint.contract.model.RequestEvaluationOutput;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-02-23T22:31:30.722986-03:00[America/Fortaleza]")
@Validated
@Api(value = "request-evaluations", description = "the request-evaluations API")
public interface RequestEvaluationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /request-evaluations : Add a new request-evaluation
     *
     * @param productId  (required)
     * @param customerCpfCnpj  (required)
     * @param requestEvaluationInput Request evaluation object (required)
     * @return A RequestEvaluationOutput object (status code 200)
     *         or Internal server error (status code 500)
     */

    @ApiOperation(value = "Add a new request-evaluation", nickname = "createRequestEvaluation", notes = "", response = RequestEvaluationOutput.class, tags={ "request-evaluations", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "A RequestEvaluationOutput object", response = RequestEvaluationOutput.class),

        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/request-evaluations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<RequestEvaluationOutput> createRequestEvaluation(
@ApiParam(value = "", required = true) @RequestHeader(value = "product_id", required = true) String productId
,
@ApiParam(value = "", required = true) @RequestHeader(value = "customer_cpf_cnpj", required = true) String customerCpfCnpj
,

@ApiParam(value = "Request evaluation object", required = true )   @Valid @RequestBody RequestEvaluationInput requestEvaluationInput) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"coverage\" : \"coverage\", \"productId\" : \"productId\", \"customerCpfCnpj\" : \"customerCpfCnpj\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"urgency\" : true, \"testType\" : \"compliance inspection\", \"id\" : 0, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /request-evaluations/{request_evaluation_id} : Deletes a request evaluation
     *
     * @param requestEvaluationId Request Evaluation id to delete (required)
     * @return Invalid ID supplied (status code 400)
     *         or Request Evaluation not found (status code 404)
     */

    @ApiOperation(value = "Deletes a request evaluation", nickname = "deleteRequestEvaluation", notes = "", tags={ "request-evaluations", })
    @ApiResponses(value = { 

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Request Evaluation not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/request-evaluations/{request_evaluation_id}"
    )
    default ResponseEntity<Void> deleteRequestEvaluation(@ApiParam(value = "Request Evaluation id to delete", required = true) @PathVariable("request_evaluation_id") Long requestEvaluationId

) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /request-evaluations/{request_evaluation_id} : Find request evaluation by ID
     *
     * @param requestEvaluationId ID of request evaluation to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Request evaluation not found (status code 404)
     */

    @ApiOperation(value = "Find request evaluation by ID", nickname = "findRequestEvaluation", notes = "", response = RequestEvaluationOutput.class, tags={ "request-evaluations", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "successful operation", response = RequestEvaluationOutput.class),

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Request evaluation not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/request-evaluations/{request_evaluation_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<RequestEvaluationOutput> findRequestEvaluation(@ApiParam(value = "ID of request evaluation to return", required = true) @PathVariable("request_evaluation_id") Long requestEvaluationId

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"coverage\" : \"coverage\", \"productId\" : \"productId\", \"customerCpfCnpj\" : \"customerCpfCnpj\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"urgency\" : true, \"testType\" : \"compliance inspection\", \"id\" : 0, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /request-evaluations : Finds all request-evaluations
     *
     * @param customerCpfCnpj CPF and CNPJ values that can be considered for filter (optional)
     * @return successful operation (status code 200)
     *         or Not found (status code 404)
     */

    @ApiOperation(value = "Finds all request-evaluations", nickname = "findRequestEvaluations", notes = "", response = RequestEvaluationOutput.class, responseContainer = "List", tags={ "request-evaluations", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "successful operation", response = RequestEvaluationOutput.class, responseContainer = "List"),

        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/request-evaluations",
        produces = { "application/json" }
    )
    default ResponseEntity<List<RequestEvaluationOutput>> findRequestEvaluations(@ApiParam(value = "CPF and CNPJ values that can be considered for filter") @Valid @RequestParam(value = "customer_cpf_cnpj", required = false) String customerCpfCnpj

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"coverage\" : \"coverage\", \"productId\" : \"productId\", \"customerCpfCnpj\" : \"customerCpfCnpj\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"urgency\" : true, \"testType\" : \"compliance inspection\", \"id\" : 0, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /request-evaluations/{request_evaluation_id} : Update an existing request evaluation
     *
     * @param requestEvaluationId Request Evaluation id to update (required)
     * @param requestEvaluationInput  (required)
     * @return Invalid ID supplied (status code 400)
     *         or Request Evaluation not found (status code 404)
     *         or Validation exception (status code 405)
     */

    @ApiOperation(value = "Update an existing request evaluation", nickname = "updateRequestEvaluation", notes = "", tags={ "request-evaluations", })
    @ApiResponses(value = { 

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Request Evaluation not found"),

        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/request-evaluations/{request_evaluation_id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateRequestEvaluation(@ApiParam(value = "Request Evaluation id to update", required = true) @PathVariable("request_evaluation_id") Long requestEvaluationId

,

@ApiParam(value = "", required = true )   @Valid @RequestBody RequestEvaluationInput requestEvaluationInput) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
