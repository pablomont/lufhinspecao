/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.uepb.lufh.avalia.contract.api;

import com.uepb.lufh.avalia.contract.model.Question;
import com.uepb.lufh.avalia.contract.model.RequestEvaluation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-02-22T00:56:03.914173-03:00[America/Fortaleza]")
@Validated
@Api(value = "request-evaluations", description = "the request-evaluations API")
public interface RequestEvaluationsApi {

    default RequestEvaluationsApiDelegate getDelegate() {
        return new RequestEvaluationsApiDelegate() {};
    }

    /**
     * POST /request-evaluations : Add a new request-evaluation
     *
     * @param question Question object that needs to be added to the form (required)
     * @return Internal server error (status code 500)
     */

    @ApiOperation(value = "Add a new request-evaluation", nickname = "createRequestEvaluation", notes = "", tags={ "request-evaluations", })
    @ApiResponses(value = { 

        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/request-evaluations",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createRequestEvaluation(

@ApiParam(value = "Question object that needs to be added to the form", required = true )   @Valid @RequestBody Question question) {
        return getDelegate().createRequestEvaluation(question);
    }


    /**
     * DELETE /request-evaluations/{request_evaluation_id} : Deletes a request evaluation
     *
     * @param requestEvaluationId Request Evaluation id to delete (required)
     * @return Invalid ID supplied (status code 400)
     *         or Request Evaluation not found (status code 404)
     */

    @ApiOperation(value = "Deletes a request evaluation", nickname = "deleteRequestEvaluation", notes = "", tags={ "request-evaluations", })
    @ApiResponses(value = { 

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Request Evaluation not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/request-evaluations/{request_evaluation_id}"
    )
    default ResponseEntity<Void> deleteRequestEvaluation(@ApiParam(value = "Request Evaluation id to delete", required = true) @PathVariable("request_evaluation_id") Long requestEvaluationId

) {
        return getDelegate().deleteRequestEvaluation(requestEvaluationId);
    }


    /**
     * GET /request-evaluations/{request_evaluation_id} : Find request evaluation by ID
     *
     * @param requestEvaluationId ID of request evaluation to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Request evaluation not found (status code 404)
     */

    @ApiOperation(value = "Find request evaluation by ID", nickname = "findRequestEvaluation", notes = "", response = RequestEvaluation.class, tags={ "request-evaluations", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "successful operation", response = RequestEvaluation.class),

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Request evaluation not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/request-evaluations/{request_evaluation_id}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<RequestEvaluation> findRequestEvaluation(@ApiParam(value = "ID of request evaluation to return", required = true) @PathVariable("request_evaluation_id") Long requestEvaluationId

) {
        return getDelegate().findRequestEvaluation(requestEvaluationId);
    }


    /**
     * GET /request-evaluations : Finds all request-evaluations
     *
     * @param customerCpfCnpj CPF and CNPJ values that can be considered for filter (optional)
     * @return successful operation (status code 200)
     *         or Not found (status code 404)
     */

    @ApiOperation(value = "Finds all request-evaluations", nickname = "findRequestEvaluations", notes = "", response = RequestEvaluation.class, responseContainer = "List", tags={ "request-evaluations", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "successful operation", response = RequestEvaluation.class, responseContainer = "List"),

        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/request-evaluations",
        produces = { "application/json" }
    )
    default ResponseEntity<List<RequestEvaluation>> findRequestEvaluations(@ApiParam(value = "CPF and CNPJ values that can be considered for filter") @Valid @RequestParam(value = "customer_cpf_cnpj", required = false) String customerCpfCnpj

) {
        return getDelegate().findRequestEvaluations(customerCpfCnpj);
    }


    /**
     * PUT /request-evaluations/{request_evaluation_id} : Update an existing request evaluation
     *
     * @param requestEvaluationId Request Evaluation id to update (required)
     * @param requestEvaluation  (required)
     * @return Invalid ID supplied (status code 400)
     *         or Request Evaluation not found (status code 404)
     *         or Validation exception (status code 405)
     */

    @ApiOperation(value = "Update an existing request evaluation", nickname = "updateRequestEvaluation", notes = "", tags={ "request-evaluations", })
    @ApiResponses(value = { 

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Request Evaluation not found"),

        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/request-evaluations/{request_evaluation_id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateRequestEvaluation(@ApiParam(value = "Request Evaluation id to update", required = true) @PathVariable("request_evaluation_id") Long requestEvaluationId

,

@ApiParam(value = "", required = true )   @Valid @RequestBody RequestEvaluation requestEvaluation) {
        return getDelegate().updateRequestEvaluation(requestEvaluationId, requestEvaluation);
    }

}
