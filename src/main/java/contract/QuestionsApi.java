/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package contract;

import model.QuestionDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-02-21T22:46:02.357514-03:00[America/Fortaleza]")
@Validated
@Api(value = "questions", description = "the questions API")
public interface QuestionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /questions : Add a new question
     *
     * @param questionDto Question object that needs to be added to the form (required)
     * @return Internal server error (status code 500)
     */
    @ApiOperation(value = "Add a new question", nickname = "createQuestion", notes = "", tags={ "questions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal server error") })
    @PostMapping(
        value = "/questions",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _createQuestion(@ApiParam(value = "Question object that needs to be added to the form" ,required=true )  @Valid @RequestBody QuestionDto questionDto) {
        return createQuestion(questionDto);
    }

    // Override this method
    default  ResponseEntity<Void> createQuestion(QuestionDto questionDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /questions/{question_id} : Deletes a question
     *
     * @param questionId Question id to delete (required)
     * @return Invalid ID supplied (status code 400)
     *         or Question not found (status code 404)
     */
    @ApiOperation(value = "Deletes a question", nickname = "deleteQuestion", notes = "", tags={ "questions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Question not found") })
    @DeleteMapping(
        value = "/questions/{question_id}"
    )
    default ResponseEntity<Void> _deleteQuestion(@ApiParam(value = "Question id to delete",required=true) @PathVariable("question_id") Long questionId) {
        return deleteQuestion(questionId);
    }

    // Override this method
    default  ResponseEntity<Void> deleteQuestion(Long questionId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /questions/{question_id} : Find question by ID
     *
     * @param questionId ID of question to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Question not found (status code 404)
     */
    @ApiOperation(value = "Find question by ID", nickname = "findQuestion", notes = "", response = QuestionDto.class, tags={ "questions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = QuestionDto.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Question not found") })
    @GetMapping(
        value = "/questions/{question_id}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<QuestionDto> _findQuestion(@ApiParam(value = "ID of question to return",required=true) @PathVariable("question_id") Long questionId) {
        return findQuestion(questionId);
    }

    // Override this method
    default  ResponseEntity<QuestionDto> findQuestion(Long questionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reference\" : { \"bibliography\" : \"bibliography\", \"type\" : \"Article\" }, \"baseQuestion\" : \"Is it designed minimal?\", \"answer\" : { \"severity\" : \"0 Not a usability problem at all\", \"weight\" : \"0 Necessary for every System\", \"possibleAnswers\" : [ \"possibleAnswers\", \"possibleAnswers\" ], \"choosenAnswer\" : \"choosenAnswer\" }, \"id\" : 0, \"detailedQuestion\" : \"Is only (and all) information, essential to decision making, displayed on the screen?\", \"class\" : { \"name\" : \"Aesthetic and minimalist design\" }, \"productType\" : \"Software\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Question> <id>123456789</id> <productType>aeiou</productType> <baseQuestion>Is it designed minimal?</baseQuestion> <detailedQuestion>Is only (and all) information, essential to decision making, displayed on the screen?</detailedQuestion> </Question>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /questions : Finds all questions
     *
     * @param propertyClass Class values that can be considered for filter (optional)
     * @param reference Reference values that can be considered for filter (optional)
     * @param productType Product type values that can be considered for filter (optional)
     * @return successful operation (status code 200)
     *         or Not found (status code 404)
     */
    @ApiOperation(value = "Finds all questions", nickname = "findQuestions", notes = "", response = QuestionDto.class, responseContainer = "List", tags={ "questions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = QuestionDto.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Not found") })
    @GetMapping(
        value = "/questions",
        produces = { "application/json" }
    )
    default ResponseEntity<List<QuestionDto>> _findQuestions(@ApiParam(value = "Class values that can be considered for filter", allowableValues = "Aesthetic and minimalist design, Consistency and standards, Error prevention, Flexibility and efficiency of use, Help and documentation, Help users recognize and recover from errors, Match between system and the real world, Recognition rather than recall, User control and freedom, Visibility of system status, Privacy & Security") @Valid @RequestParam(value = "class", required = false) String propertyClass,@ApiParam(value = "Reference values that can be considered for filter", allowableValues = "Article, Book, eDocument, Standard") @Valid @RequestParam(value = "reference", required = false) String reference,@ApiParam(value = "Product type values that can be considered for filter", allowableValues = "Software, Hardware, Hardware/Software") @Valid @RequestParam(value = "product_type", required = false) String productType) {
        return findQuestions(propertyClass, reference, productType);
    }

    // Override this method
    default  ResponseEntity<List<QuestionDto>> findQuestions(String propertyClass, String reference, String productType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reference\" : { \"bibliography\" : \"bibliography\", \"type\" : \"Article\" }, \"baseQuestion\" : \"Is it designed minimal?\", \"answer\" : { \"severity\" : \"0 Not a usability problem at all\", \"weight\" : \"0 Necessary for every System\", \"possibleAnswers\" : [ \"possibleAnswers\", \"possibleAnswers\" ], \"choosenAnswer\" : \"choosenAnswer\" }, \"id\" : 0, \"detailedQuestion\" : \"Is only (and all) information, essential to decision making, displayed on the screen?\", \"class\" : { \"name\" : \"Aesthetic and minimalist design\" }, \"productType\" : \"Software\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /questions/{question_id} : Update an existing question
     *
     * @param questionId Question id to update (required)
     * @param questionDto Question object that needs to be added to the form (required)
     * @return Invalid ID supplied (status code 400)
     *         or Question not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @ApiOperation(value = "Update an existing question", nickname = "updateQuestion", notes = "", tags={ "questions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Question not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @PutMapping(
        value = "/questions/{question_id}",
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<Void> _updateQuestion(@ApiParam(value = "Question id to update",required=true) @PathVariable("question_id") Long questionId,@ApiParam(value = "Question object that needs to be added to the form" ,required=true )  @Valid @RequestBody QuestionDto questionDto) {
        return updateQuestion(questionId, questionDto);
    }

    // Override this method
    default  ResponseEntity<Void> updateQuestion(Long questionId, QuestionDto questionDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
