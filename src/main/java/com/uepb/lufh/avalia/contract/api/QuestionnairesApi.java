/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.uepb.lufh.avalia.contract.api;

import com.uepb.lufh.avalia.contract.model.Questionnaire;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-02-22T00:21:14.348877-03:00[America/Fortaleza]")
@Validated
@Api(value = "questionnaires", description = "the questionnaires API")
public interface QuestionnairesApi {

    default QuestionnairesApiDelegate getDelegate() {
        return new QuestionnairesApiDelegate() {};
    }

    /**
     * POST /questionnaires : Add a new questionnaire
     *
     * @param questionnaire  (optional)
     * @return Internal server error (status code 500)
     */

    @ApiOperation(value = "Add a new questionnaire", nickname = "createQuestionaire", notes = "", tags={ "questionnaires", })
    @ApiResponses(value = { 

        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/questionnaires",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createQuestionaire(

@ApiParam(value = "" )   @Valid @RequestBody(required = false) Questionnaire questionnaire) {
        return getDelegate().createQuestionaire(questionnaire);
    }


    /**
     * DELETE /questionnaires/{questionnaire_id} : Deletes a questionnaire
     *
     * @param questionnaireId Questionnaire id to delete (required)
     * @return Invalid ID supplied (status code 400)
     *         or Questionnaire not found (status code 404)
     */

    @ApiOperation(value = "Deletes a questionnaire", nickname = "deleteQuestionnaire", notes = "", tags={ "questionnaires", })
    @ApiResponses(value = { 

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Questionnaire not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/questionnaires/{questionnaire_id}"
    )
    default ResponseEntity<Void> deleteQuestionnaire(@ApiParam(value = "Questionnaire id to delete", required = true) @PathVariable("questionnaire_id") Long questionnaireId

) {
        return getDelegate().deleteQuestionnaire(questionnaireId);
    }


    /**
     * GET /questionnaires/{questionnaire_id} : Find questionnaire by ID
     *
     * @param questionnaireId ID of questionnaire to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Questionnaire not found (status code 404)
     */

    @ApiOperation(value = "Find questionnaire by ID", nickname = "findQuestionnaire", notes = "", response = Questionnaire.class, tags={ "questionnaires", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "successful operation", response = Questionnaire.class),

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Questionnaire not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/questionnaires/{questionnaire_id}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<Questionnaire> findQuestionnaire(@ApiParam(value = "ID of questionnaire to return", required = true) @PathVariable("questionnaire_id") Long questionnaireId

) {
        return getDelegate().findQuestionnaire(questionnaireId);
    }


    /**
     * GET /questionnaires : Finds all questionnaires
     *
     * @param evaluator Evaluator values that can be considered for filter (optional)
     * @param creator Creator values that can be considered for filter (optional)
     * @return successful operation (status code 200)
     *         or Not found (status code 404)
     */

    @ApiOperation(value = "Finds all questionnaires", nickname = "findQuestionnaires", notes = "", response = Questionnaire.class, responseContainer = "List", tags={ "questionnaires", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "successful operation", response = Questionnaire.class, responseContainer = "List"),

        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/questionnaires",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Questionnaire>> findQuestionnaires(@ApiParam(value = "Evaluator values that can be considered for filter") @Valid @RequestParam(value = "evaluator", required = false) String evaluator

,@ApiParam(value = "Creator values that can be considered for filter") @Valid @RequestParam(value = "creator", required = false) String creator

) {
        return getDelegate().findQuestionnaires(evaluator, creator);
    }


    /**
     * PUT /questionnaires/{questionnaire_id} : Update an existing questionnaire
     *
     * @param questionnaireId Questionnaire id to update (required)
     * @param questionnaire  (required)
     * @return Invalid ID supplied (status code 400)
     *         or Questionnaire not found (status code 404)
     *         or Validation exception (status code 405)
     */

    @ApiOperation(value = "Update an existing questionnaire", nickname = "updateQuestionnaire", notes = "", tags={ "questionnaires", })
    @ApiResponses(value = { 

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Questionnaire not found"),

        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/questionnaires/{questionnaire_id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateQuestionnaire(@ApiParam(value = "Questionnaire id to update", required = true) @PathVariable("questionnaire_id") Long questionnaireId

,

@ApiParam(value = "", required = true )   @Valid @RequestBody Questionnaire questionnaire) {
        return getDelegate().updateQuestionnaire(questionnaireId, questionnaire);
    }

}
