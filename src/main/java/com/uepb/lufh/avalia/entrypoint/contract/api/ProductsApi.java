/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.uepb.lufh.avalia.entrypoint.contract.api;

import com.uepb.lufh.avalia.entrypoint.contract.model.Error;
import com.uepb.lufh.avalia.entrypoint.contract.model.ProductInput;
import com.uepb.lufh.avalia.entrypoint.contract.model.ProductOutput;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-31T23:04:52.699113-03:00[America/Fortaleza]")
@Validated
@Tag(name = "products", description = "Disponibiliza operações sobre os produtos a serem avaliados.")
@RequestMapping("${openapi.lufhInspeo.base-path:/lufh-avalia}")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /products : Add a new product
     *
     * @param productInput Product object that needs to be evaluated (required)
     * @return A ProductOutput object (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "createProduct",
        summary = "Add a new product",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A ProductOutput object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductOutput.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductOutput> createProduct(
        @Parameter(name = "ProductInput", description = "Product object that needs to be evaluated", required = true) @Valid @RequestBody ProductInput productInput
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"manufacterName\" : \"Apple\", \"productClass\" : \"Class I\", \"completionLevel\" : \"Alfa Test\", \"id\" : 0, \"productName\" : \"Iphone X\", \"productType\" : { \"name\" : \"Websites\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /products/{product_id} : Deletes a product
     *
     * @param productId Product id to delete (required)
     * @return Not found (status code 404)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Deletes a product",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{product_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteProduct(
        @Parameter(name = "product_id", description = "Product id to delete", required = true, in = ParameterIn.PATH) @PathVariable("product_id") Long productId
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/{product_id} : Find product by ID
     *
     * @param productId ID of product to return (required)
     * @return successful operation (status code 200)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "findProduct",
        summary = "Find product by ID",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductOutput.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProductOutput.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{product_id}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<ProductOutput> findProduct(
        @Parameter(name = "product_id", description = "ID of product to return", required = true, in = ParameterIn.PATH) @PathVariable("product_id") Long productId
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"manufacterName\" : \"Apple\", \"productClass\" : \"Class I\", \"completionLevel\" : \"Alfa Test\", \"id\" : 0, \"productName\" : \"Iphone X\", \"productType\" : { \"name\" : \"Websites\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>123456789</id> <productName>Iphone X</productName> <manufacterName>Apple</manufacterName> <productClass>Class I</productClass> <completionLevel>Alfa Test</completionLevel> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products : Finds all products
     *
     * @param productName Product name values that can be considered for filter (optional)
     * @param productType Product type values that can be considered for filter (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "findProducts",
        summary = "Finds all products",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductOutput.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProductOutput>> findProducts(
        @Parameter(name = "product_name", description = "Product name values that can be considered for filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "product_name", required = false) String productName,
        @Parameter(name = "product_type", description = "Product type values that can be considered for filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "product_type", required = false) String productType
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"manufacterName\" : \"Apple\", \"productClass\" : \"Class I\", \"completionLevel\" : \"Alfa Test\", \"id\" : 0, \"productName\" : \"Iphone X\", \"productType\" : { \"name\" : \"Websites\" } }, { \"manufacterName\" : \"Apple\", \"productClass\" : \"Class I\", \"completionLevel\" : \"Alfa Test\", \"id\" : 0, \"productName\" : \"Iphone X\", \"productType\" : { \"name\" : \"Websites\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /products/{product_id} : Update an existing product
     *
     * @param productId Product id to update (required)
     * @param productInput Product object that needs to be evaluated (required)
     * @return Bad Request (status code 400)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update an existing product",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/{product_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateProduct(
        @Parameter(name = "product_id", description = "Product id to update", required = true, in = ParameterIn.PATH) @PathVariable("product_id") Long productId,
        @Parameter(name = "ProductInput", description = "Product object that needs to be evaluated", required = true) @Valid @RequestBody ProductInput productInput
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
