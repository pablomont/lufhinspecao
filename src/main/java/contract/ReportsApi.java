/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package contract;

import model.ReportDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-02-21T22:46:02.357514-03:00[America/Fortaleza]")
@Validated
@Api(value = "reports", description = "the reports API")
public interface ReportsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /reports : Add a new report
     *
     * @param reportDto  (required)
     * @return Internal server error (status code 500)
     */
    @ApiOperation(value = "Add a new report", nickname = "createReport", notes = "", tags={ "reports", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal server error") })
    @PostMapping(
        value = "/reports",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _createReport(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ReportDto reportDto) {
        return createReport(reportDto);
    }

    // Override this method
    default  ResponseEntity<Void> createReport(ReportDto reportDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /reports/{report_id} : Deletes a report
     *
     * @param reportId Report id to delete (required)
     * @return Invalid ID supplied (status code 400)
     *         or Report not found (status code 404)
     */
    @ApiOperation(value = "Deletes a report", nickname = "deleteReport", notes = "", tags={ "reports", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Report not found") })
    @DeleteMapping(
        value = "/reports/{report_id}"
    )
    default ResponseEntity<Void> _deleteReport(@ApiParam(value = "Report id to delete",required=true) @PathVariable("report_id") Long reportId) {
        return deleteReport(reportId);
    }

    // Override this method
    default  ResponseEntity<Void> deleteReport(Long reportId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reports/{report_id} : Find a report by ID
     *
     * @param reportId ID of report to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Report not found (status code 404)
     */
    @ApiOperation(value = "Find a report by ID", nickname = "findReport", notes = "", response = ReportDto.class, tags={ "reports", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ReportDto.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Report not found") })
    @GetMapping(
        value = "/reports/{report_id}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<ReportDto> _findReport(@ApiParam(value = "ID of report to return",required=true) @PathVariable("report_id") Long reportId) {
        return findReport(reportId);
    }

    // Override this method
    default  ResponseEntity<ReportDto> findReport(Long reportId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestEvaluationId\" : 0, \"reportDate\" : \"2000-01-23T04:56:07.000+00:00\", \"questionare\" : { \"creator\" : \"creator\", \"questions\" : [ { \"reference\" : { \"bibliography\" : \"bibliography\", \"type\" : \"Article\" }, \"baseQuestion\" : \"Is it designed minimal?\", \"answer\" : { \"severity\" : \"0 Not a usability problem at all\", \"weight\" : \"0 Necessary for every System\", \"possibleAnswers\" : [ \"possibleAnswers\", \"possibleAnswers\" ], \"choosenAnswer\" : \"choosenAnswer\" }, \"id\" : 0, \"detailedQuestion\" : \"Is only (and all) information, essential to decision making, displayed on the screen?\", \"class\" : { \"name\" : \"Aesthetic and minimalist design\" }, \"productType\" : \"Software\" }, { \"reference\" : { \"bibliography\" : \"bibliography\", \"type\" : \"Article\" }, \"baseQuestion\" : \"Is it designed minimal?\", \"answer\" : { \"severity\" : \"0 Not a usability problem at all\", \"weight\" : \"0 Necessary for every System\", \"possibleAnswers\" : [ \"possibleAnswers\", \"possibleAnswers\" ], \"choosenAnswer\" : \"choosenAnswer\" }, \"id\" : 0, \"detailedQuestion\" : \"Is only (and all) information, essential to decision making, displayed on the screen?\", \"class\" : { \"name\" : \"Aesthetic and minimalist design\" }, \"productType\" : \"Software\" } ], \"id\" : 0, \"evaluator\" : \"evaluator\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Report> <requestEvaluationId>123</requestEvaluationId> <reportDate>2000-01-23T04:56:07.000Z</reportDate> </Report>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reports : Finds all reports
     *
     * @param requestEvaluationId Request evaluation id values that can be considered for filter (optional)
     * @param productType Product type values that can be considered for filter (optional)
     * @param reportDate Report date values that can be considered for filter (optional)
     * @return successful operation (status code 200)
     *         or Not found (status code 404)
     */
    @ApiOperation(value = "Finds all reports", nickname = "findReports", notes = "", response = ReportDto.class, responseContainer = "List", tags={ "reports", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ReportDto.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Not found") })
    @GetMapping(
        value = "/reports",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ReportDto>> _findReports(@ApiParam(value = "Request evaluation id values that can be considered for filter") @Valid @RequestParam(value = "request_evaluation_id", required = false) String requestEvaluationId,@ApiParam(value = "Product type values that can be considered for filter", allowableValues = "Software, Hardware, Hardware/Software") @Valid @RequestParam(value = "product_type", required = false) String productType,@ApiParam(value = "Report date values that can be considered for filter") @Valid @RequestParam(value = "report_date", required = false) String reportDate) {
        return findReports(requestEvaluationId, productType, reportDate);
    }

    // Override this method
    default  ResponseEntity<List<ReportDto>> findReports(String requestEvaluationId, String productType, String reportDate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requestEvaluationId\" : 0, \"reportDate\" : \"2000-01-23T04:56:07.000+00:00\", \"questionare\" : { \"creator\" : \"creator\", \"questions\" : [ { \"reference\" : { \"bibliography\" : \"bibliography\", \"type\" : \"Article\" }, \"baseQuestion\" : \"Is it designed minimal?\", \"answer\" : { \"severity\" : \"0 Not a usability problem at all\", \"weight\" : \"0 Necessary for every System\", \"possibleAnswers\" : [ \"possibleAnswers\", \"possibleAnswers\" ], \"choosenAnswer\" : \"choosenAnswer\" }, \"id\" : 0, \"detailedQuestion\" : \"Is only (and all) information, essential to decision making, displayed on the screen?\", \"class\" : { \"name\" : \"Aesthetic and minimalist design\" }, \"productType\" : \"Software\" }, { \"reference\" : { \"bibliography\" : \"bibliography\", \"type\" : \"Article\" }, \"baseQuestion\" : \"Is it designed minimal?\", \"answer\" : { \"severity\" : \"0 Not a usability problem at all\", \"weight\" : \"0 Necessary for every System\", \"possibleAnswers\" : [ \"possibleAnswers\", \"possibleAnswers\" ], \"choosenAnswer\" : \"choosenAnswer\" }, \"id\" : 0, \"detailedQuestion\" : \"Is only (and all) information, essential to decision making, displayed on the screen?\", \"class\" : { \"name\" : \"Aesthetic and minimalist design\" }, \"productType\" : \"Software\" } ], \"id\" : 0, \"evaluator\" : \"evaluator\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /reports/{report_id} : Update an existing report
     *
     * @param reportId Report id to update (required)
     * @param reportDto  (required)
     * @return Invalid ID supplied (status code 400)
     *         or Question not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @ApiOperation(value = "Update an existing report", nickname = "updateReport", notes = "", tags={ "reports", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Question not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @PutMapping(
        value = "/reports/{report_id}",
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<Void> _updateReport(@ApiParam(value = "Report id to update",required=true) @PathVariable("report_id") Long reportId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ReportDto reportDto) {
        return updateReport(reportId, reportDto);
    }

    // Override this method
    default  ResponseEntity<Void> updateReport(Long reportId, ReportDto reportDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
