/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.uepb.lufh.avalia.entrypoint.contract.api;

import com.uepb.lufh.avalia.entrypoint.contract.model.Product;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-02-22T02:43:06.822926-03:00[America/Fortaleza]")
@Validated
@Api(value = "products", description = "the products API")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /products : Add a new product
     *
     * @param product Product object that needs to be evaluated (required)
     * @return Internal server error (status code 500)
     */

    @ApiOperation(value = "Add a new product", nickname = "createProduct", notes = "", tags={ "products", })
    @ApiResponses(value = { 

        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createProduct(

@ApiParam(value = "Product object that needs to be evaluated", required = true )   @Valid @RequestBody Product product) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /products/{product_id} : Deletes a product
     *
     * @param productId Product id to delete (required)
     * @return Invalid ID supplied (status code 400)
     *         or Product not found (status code 404)
     */

    @ApiOperation(value = "Deletes a product", nickname = "deleteProduct", notes = "", tags={ "products", })
    @ApiResponses(value = { 

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Product not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{product_id}"
    )
    default ResponseEntity<Void> deleteProduct(@ApiParam(value = "Product id to delete", required = true) @PathVariable("product_id") Long productId

) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/{product_id} : Find product by ID
     *
     * @param productId ID of product to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Product not found (status code 404)
     */

    @ApiOperation(value = "Find product by ID", nickname = "findProduct", notes = "", response = Product.class, tags={ "products", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "successful operation", response = Product.class),

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Product not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{product_id}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<Product> findProduct(@ApiParam(value = "ID of product to return", required = true) @PathVariable("product_id") Long productId

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"manufacterName\" : \"Apple\", \"productClass\" : \"Class I\", \"completionLevel\" : \"Alfa Test, Beta Test\", \"id\" : 0, \"productName\" : \"Iphone X\", \"productType\" : { \"productTypeName\" : \"Medical Device\", \"id\" : 6 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Product> <id>123456789</id> <productName>Iphone X</productName> <manufacterName>Apple</manufacterName> <productClass>Class I</productClass> <completionLevel>Alfa Test, Beta Test</completionLevel> </Product>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products : Finds all products
     *
     * @param productName Product name values that can be considered for filter (optional)
     * @param productType Product type values that can be considered for filter (optional)
     * @return successful operation (status code 200)
     *         or Not found (status code 404)
     */

    @ApiOperation(value = "Finds all products", nickname = "findProducts", notes = "", response = Product.class, responseContainer = "List", tags={ "products", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "successful operation", response = Product.class, responseContainer = "List"),

        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Product>> findProducts(@ApiParam(value = "Product name values that can be considered for filter") @Valid @RequestParam(value = "product_name", required = false) String productName

,@ApiParam(value = "Product type values that can be considered for filter", allowableValues = "Software, Hardware, Hardware/Software") @Valid @RequestParam(value = "product_type", required = false) String productType

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"manufacterName\" : \"Apple\", \"productClass\" : \"Class I\", \"completionLevel\" : \"Alfa Test, Beta Test\", \"id\" : 0, \"productName\" : \"Iphone X\", \"productType\" : { \"productTypeName\" : \"Medical Device\", \"id\" : 6 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /products/{product_id} : Update an existing product
     *
     * @param productId Product id to update (required)
     * @param product Product object that needs to be evaluated (required)
     * @return Invalid ID supplied (status code 400)
     *         or Question not found (status code 404)
     *         or Validation exception (status code 405)
     */

    @ApiOperation(value = "Update an existing product", nickname = "updateProduct", notes = "", tags={ "products", })
    @ApiResponses(value = { 

        @ApiResponse(code = 400, message = "Invalid ID supplied"),

        @ApiResponse(code = 404, message = "Question not found"),

        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/{product_id}",
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<Void> updateProduct(@ApiParam(value = "Product id to update", required = true) @PathVariable("product_id") Long productId

,

@ApiParam(value = "Product object that needs to be evaluated", required = true )   @Valid @RequestBody Product product) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
