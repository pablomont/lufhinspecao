{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "1.0.0-oas3",
    "contact" : {
      "email" : "paablomt@gmail.com",
      "url" : "https://www.linkedin.com/in/pablo-monteiro-santos/"
    },
    "license" : {
      "name" : "MIT License",
      "url" : "http://choosealicense.com/licenses/mit/"
    },
    "title" : "Lufh Inspeção API",
    "description" : "API responsável por gerenciar a avaliação de usabilidade a partir do método por inspeção a padrões."
  },
  "tags" : [ {
    "name" : "questions",
    "description" : "Disponibiliza operações sobre as questões."
  }, {
    "name" : "questionnaires",
    "description" : "Disponibiliza operações sobre os questionários utilizado para avaliar o produto."
  }, {
    "name" : "request-evaluations",
    "description" : "Disponibiliza operações sobre as requisições de avaliação."
  }, {
    "name" : "reports",
    "description" : "Disponibiliza operações sobre os relatórios de uma avaliação."
  }, {
    "name" : "products",
    "description" : "Disponibiliza operações sobre os produtos a serem avaliados."
  }, {
    "name" : "customers",
    "description" : "Disponibiliza operações sobre os clientes que solicitaram uma avaliação de um determinado produto."
  } ],
  "paths" : {
    "/questions" : {
      "get" : {
        "tags" : [ "questions" ],
        "summary" : "Finds all questions",
        "operationId" : "findQuestions",
        "parameters" : [ {
          "name" : "class",
          "in" : "query",
          "description" : "Class values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Aesthetic and minimalist design", "Consistency and standards", "Error prevention", "Flexibility and efficiency of use", "Help and documentation", "Help users recognize and recover from errors", "Match between system and the real world", "Recognition rather than recall", "User control and freedom", "Visibility of system status", "Privacy & Security" ]
          }
        }, {
          "name" : "reference",
          "in" : "query",
          "description" : "Reference values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Article", "Book", "eDocument", "Standard" ]
          }
        }, {
          "name" : "product_type",
          "in" : "query",
          "description" : "Product type values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Software", "Hardware", "Hardware/Software" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Question"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "post" : {
        "tags" : [ "questions" ],
        "summary" : "Add a new question",
        "operationId" : "createQuestion",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Question"
              }
            }
          },
          "description" : "Question object that needs to be added to the form",
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/questions/{question_id}" : {
      "get" : {
        "tags" : [ "questions" ],
        "summary" : "Find question by ID",
        "operationId" : "findQuestion",
        "parameters" : [ {
          "name" : "question_id",
          "in" : "path",
          "description" : "ID of question to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Question"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Question"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Question not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "questions" ],
        "summary" : "Deletes a question",
        "operationId" : "deleteQuestion",
        "parameters" : [ {
          "name" : "question_id",
          "in" : "path",
          "description" : "Question id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Question not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "put" : {
        "tags" : [ "questions" ],
        "summary" : "Update an existing question",
        "operationId" : "updateQuestion",
        "parameters" : [ {
          "name" : "question_id",
          "in" : "path",
          "description" : "Question id to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Question"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Question"
              }
            }
          },
          "description" : "Question object that needs to be added to the form",
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Question not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      }
    },
    "/questionnaires" : {
      "get" : {
        "tags" : [ "questionnaires" ],
        "summary" : "Finds all questionnaires",
        "operationId" : "findQuestionnaires",
        "parameters" : [ {
          "name" : "evaluator",
          "in" : "query",
          "description" : "Evaluator values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "creator",
          "in" : "query",
          "description" : "Creator values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Questionnaire"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "post" : {
        "tags" : [ "questionnaires" ],
        "summary" : "Add a new questionnaire",
        "operationId" : "createQuestionaire",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Questionnaire"
              }
            }
          }
        },
        "responses" : {
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/questionnaires/{questionnaire_id}" : {
      "get" : {
        "tags" : [ "questionnaires" ],
        "summary" : "Find questionnaire by ID",
        "operationId" : "findQuestionnaire",
        "parameters" : [ {
          "name" : "questionnaire_id",
          "in" : "path",
          "description" : "ID of questionnaire to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Questionnaire"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Questionnaire"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Questionnaire not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "questionnaires" ],
        "summary" : "Deletes a questionnaire",
        "operationId" : "deleteQuestionnaire",
        "parameters" : [ {
          "name" : "questionnaire_id",
          "in" : "path",
          "description" : "Questionnaire id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Questionnaire not found"
          }
        }
      },
      "put" : {
        "tags" : [ "questionnaires" ],
        "summary" : "Update an existing questionnaire",
        "operationId" : "updateQuestionnaire",
        "parameters" : [ {
          "name" : "questionnaire_id",
          "in" : "path",
          "description" : "Questionnaire id to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Questionnaire"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Questionnaire not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      }
    },
    "/request-evaluations" : {
      "get" : {
        "tags" : [ "request-evaluations" ],
        "summary" : "Finds all request-evaluations",
        "operationId" : "findRequestEvaluations",
        "parameters" : [ {
          "name" : "customer_cpf_cnpj",
          "in" : "query",
          "description" : "CPF and CNPJ values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RequestEvaluation"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "post" : {
        "tags" : [ "request-evaluations" ],
        "summary" : "Add a new request-evaluation",
        "operationId" : "createRequestEvaluation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Question"
              }
            }
          },
          "description" : "Question object that needs to be added to the form",
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/request-evaluations/{request_evaluation_id}" : {
      "get" : {
        "tags" : [ "request-evaluations" ],
        "summary" : "Find request evaluation by ID",
        "operationId" : "findRequestEvaluation",
        "parameters" : [ {
          "name" : "request_evaluation_id",
          "in" : "path",
          "description" : "ID of request evaluation to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RequestEvaluation"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RequestEvaluation"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Request evaluation not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "request-evaluations" ],
        "summary" : "Deletes a request evaluation",
        "operationId" : "deleteRequestEvaluation",
        "parameters" : [ {
          "name" : "request_evaluation_id",
          "in" : "path",
          "description" : "Request Evaluation id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Request Evaluation not found"
          }
        }
      },
      "put" : {
        "tags" : [ "request-evaluations" ],
        "summary" : "Update an existing request evaluation",
        "operationId" : "updateRequestEvaluation",
        "parameters" : [ {
          "name" : "request_evaluation_id",
          "in" : "path",
          "description" : "Request Evaluation id to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestEvaluation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Request Evaluation not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      }
    },
    "/reports" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Finds all reports",
        "operationId" : "findReports",
        "parameters" : [ {
          "name" : "request_evaluation_id",
          "in" : "query",
          "description" : "Request evaluation id values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "product_type",
          "in" : "query",
          "description" : "Product type values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Software", "Hardware", "Hardware/Software" ]
          }
        }, {
          "name" : "report_date",
          "in" : "query",
          "description" : "Report date values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "post" : {
        "tags" : [ "reports" ],
        "summary" : "Add a new report",
        "operationId" : "createReport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Report"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/reports/{report_id}" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Find a report by ID",
        "operationId" : "findReport",
        "parameters" : [ {
          "name" : "report_id",
          "in" : "path",
          "description" : "ID of report to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Report"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Report"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Report not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "reports" ],
        "summary" : "Deletes a report",
        "operationId" : "deleteReport",
        "parameters" : [ {
          "name" : "report_id",
          "in" : "path",
          "description" : "Report id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Report not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "put" : {
        "tags" : [ "reports" ],
        "summary" : "Update an existing report",
        "operationId" : "updateReport",
        "parameters" : [ {
          "name" : "report_id",
          "in" : "path",
          "description" : "Report id to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Report"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Report"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Question not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      }
    },
    "/products" : {
      "get" : {
        "tags" : [ "products" ],
        "summary" : "Finds all products",
        "operationId" : "findProducts",
        "parameters" : [ {
          "name" : "product_name",
          "in" : "query",
          "description" : "Product name values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "product_type",
          "in" : "query",
          "description" : "Product type values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Software", "Hardware", "Hardware/Software" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "post" : {
        "tags" : [ "products" ],
        "summary" : "Add a new product",
        "operationId" : "createProduct",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            }
          },
          "description" : "Product object that needs to be evaluated",
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/products/{product_id}" : {
      "get" : {
        "tags" : [ "products" ],
        "summary" : "Find product by ID",
        "operationId" : "findProduct",
        "parameters" : [ {
          "name" : "product_id",
          "in" : "path",
          "description" : "ID of product to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "products" ],
        "summary" : "Deletes a product",
        "operationId" : "deleteProduct",
        "parameters" : [ {
          "name" : "product_id",
          "in" : "path",
          "description" : "Product id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "put" : {
        "tags" : [ "products" ],
        "summary" : "Update an existing product",
        "operationId" : "updateProduct",
        "parameters" : [ {
          "name" : "product_id",
          "in" : "path",
          "description" : "Product id to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            }
          },
          "description" : "Product object that needs to be evaluated",
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Question not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      }
    },
    "/customers" : {
      "get" : {
        "tags" : [ "customers" ],
        "summary" : "Finds all customers",
        "operationId" : "findCustomers",
        "parameters" : [ {
          "name" : "customer_cpf_cnpj",
          "in" : "query",
          "description" : "CPF and CNPJ values that can be considered for filter",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "post" : {
        "tags" : [ "customers" ],
        "summary" : "Add a new customer",
        "operationId" : "createCustomer",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          },
          "description" : "Customer object that needs to have a product evaluation",
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/customers/{customer_cpf_cnpj}" : {
      "get" : {
        "tags" : [ "customers" ],
        "summary" : "Find a customer by ID",
        "operationId" : "findCustomer",
        "parameters" : [ {
          "name" : "customer_cpf_cnpj",
          "in" : "path",
          "description" : "CPF or CNPJ of customer to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Customer not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "customers" ],
        "summary" : "Deletes a customer",
        "operationId" : "deleteCustomer",
        "parameters" : [ {
          "name" : "customer_cpf_cnpj",
          "in" : "path",
          "description" : "Customer id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Customer not found"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ]
      },
      "put" : {
        "tags" : [ "customers" ],
        "summary" : "Update an existing customer",
        "operationId" : "updateCustomer",
        "parameters" : [ {
          "name" : "customer_cpf_cnpj",
          "in" : "path",
          "description" : "Customer id to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          },
          "description" : "Customer object that needs to have a product evaluation",
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Customer not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "petstore_auth" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
            "scopes" : {
              "write:pets" : "modify pets in your account",
              "read:pets" : "read your pets"
            }
          }
        }
      },
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      }
    },
    "schemas" : {
      "Product" : {
        "description" : "Represents a product to be evaluated",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "productName" : {
            "type" : "string",
            "example" : "Iphone X"
          },
          "manufacterName" : {
            "type" : "string",
            "example" : "Apple"
          },
          "productType" : {
            "type" : "object",
            "$ref" : "#/components/schemas/ProductType"
          },
          "productClass" : {
            "type" : "string",
            "example" : "Class I"
          },
          "completionLevel" : {
            "type" : "string",
            "example" : "Alfa Test, Beta Test"
          }
        }
      },
      "ProductType" : {
        "description" : "Representa o tipo do produto",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "productTypeName" : {
            "type" : "string",
            "example" : "Medical Device"
          }
        }
      },
      "Question" : {
        "type" : "object",
        "required" : [ "description" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "class" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Class"
          },
          "productType" : {
            "type" : "string",
            "enum" : [ "Software", "Hardware", "Hardware/Software" ]
          },
          "baseQuestion" : {
            "type" : "string",
            "example" : "Is it designed minimal?"
          },
          "detailedQuestion" : {
            "type" : "string",
            "example" : "Is only (and all) information, essential to decision making, displayed on the screen?"
          },
          "reference" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Reference"
          },
          "answer" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Answer"
          }
        },
        "xml" : {
          "name" : "Question"
        }
      },
      "Class" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Each class of a question is a Nilsen heuristic",
            "enum" : [ "Aesthetic and minimalist design", "Consistency and standards", "Error prevention", "Flexibility and efficiency of use", "Help and documentation", "Help users recognize, diagnose, and recover from errors", "Match between system and the real world", "Recognition rather than recall", "User control and freedom", "Visibility of system status", "Privacy & Security" ]
          }
        }
      },
      "Reference" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "type of reference",
            "enum" : [ "Article", "Book", "eDocument", "Standard" ]
          },
          "bibliography" : {
            "type" : "string"
          }
        }
      },
      "Answer" : {
        "description" : "Represents the answer data for the questions",
        "type" : "object",
        "properties" : {
          "possibleAnswers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "choosenAnswer" : {
            "type" : "string"
          },
          "severity" : {
            "type" : "string",
            "enum" : [ "0 Not a usability problem at all", "1 Cosmetic problem only. Need not be fixed unless extra time is available", "2 Minor usability problem. Fixing this should be given low priority", "3 Major usability problem. Important to fix. Should be given high priority", "4 Usability catastrophe. Imperative to fix this before product can be released" ]
          },
          "weight" : {
            "type" : "string",
            "enum" : [ "0 Necessary for every System", "1 Necessary for Systems without more than one Dialog", "2 Necessary for Simple Systems without data have to be entered or with strict guidance throughout the usage process", "3 Necessary for Complex Systems with data have to be entered on several dialogs" ]
          }
        }
      },
      "Questionnaire" : {
        "description" : "It represents a grouping of questions that must be answered when analyzing a product.",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "questions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Question"
            }
          },
          "evaluator" : {
            "type" : "string"
          },
          "creator" : {
            "type" : "string"
          }
        }
      },
      "RequestEvaluation" : {
        "description" : "Represents a request to evaluate a product.",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "productId" : {
            "type" : "string"
          },
          "customerCpfCnpj" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Entry date into lufh"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Planned departure date from lufh"
          },
          "urgency" : {
            "type" : "boolean"
          },
          "testType" : {
            "type" : "string",
            "description" : "Type of contracted test",
            "enum" : [ "compliance inspection", "performance measurement", "heuristic evaluation", "user opinion" ]
          },
          "coverage" : {
            "type" : "string",
            "description" : "Contracted scope"
          }
        }
      },
      "Customer" : {
        "description" : "Represents a customer who has requested a product review",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "customerName" : {
            "type" : "string"
          },
          "cpfCnpj" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          }
        }
      },
      "Report" : {
        "description" : "Represents the result of the evaluation",
        "properties" : {
          "requestEvaluationId" : {
            "type" : "integer"
          },
          "reportDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "date the report was made"
          },
          "questionare" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Questionnaire"
          }
        }
      }
    }
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/pablo.santos/LufhInspecao/1.0.0"
  } ]
}